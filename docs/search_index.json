[["index.html", "Collaborating on code with GitHub Chapter 1 Git setup 1.1 What is Git? 1.2 Setup git on your computer", " Collaborating on code with GitHub Nicole Fortuna 2025-01-29 Chapter 1 Git setup 1.1 What is Git? Git is a version control software which can track the development of your projects through time. Git works by taking a snapshot of your project at key stages (as indicated by you), which allows you to travel back to previous iterations of your project. In addition, git uses a feature called branching that allows the user to maintain multiple versions of their code at once. These versions can have different histories and can be used as a testing area when developing new features for your project. The functionality of git is best realised in multi-user projects as it keeps track of exactly who made what changes and when, and provides a mechanism to merge files that have been edited by multiple people. People who use git, will generally utilise both local and remote repositories for their projects. A local repository is one that is housed on your personal computer, and is where project development occurs. The remote repository can have several uses. The remote repository can be used as a private backup of the work that you have done, or it can act as a public location for people to access your code. It can also act as an intermediary for a project with multiple developers. If a project has multiple developers, each developer can work on their contributions on their local computer (as seen in Figure 1), and then add to the remote repository as needed (making sure to merge any conflicts between users along the way). Figure 1. Example interaction between multiple developers of a project. Commits represet snapshots in time and are listed in reverse chronological order. Commits have been restricted to the two most recent for simplicity’s sake. The most commonly used host for remote git repositories is github, however there exists many alternatives like bitbucket, and GitLab. Local repositories can be interacted with directly from the Terminal. However, many GUIs have been created over the years in order to make git more user friendly. If your project is being developed using RStudio, this IDE (Integrated Development Environment) already comes with inbuilt git functionality. Otherwise, a popular and easy to use GUI is GitHub Desktop. For the purposes of this tutorial, we will demonstrate how to interact with git directly through RStudio as it integrates conveniently with projects. There are a few occasions where you will need to interact with Git through Terminal (or Git Bash if you are on Windows), however this mostly only be during set up. When giving example Terminal commands, anything set between these symbols &lt;&gt; represents a variable input to be provided by the user. This tutorial gives a working knowledge of git which should be adequate for most git users. For additional help and further functionality, the book Pro Git is recommended. 1.2 Setup git on your computer To download git, visit https://git-scm.com/downloads if you have a Mac, or https://gitforwindows.org/ if you have a Windows machine. The link for Windows will also download Git Bash which is useful for setting up Git on your computer. Once git has been successfully downloaded, you can initiate the global settings of git on your computer. While a variety of settings can be specified, the necessary ones include your username and email, so that git can track when you make a change. To set-up your username, type the following command into Terminal (or Git Bash): git config --global user.name &lt;&quot;John Doe&quot;&gt; To provide your email: git config --global user.email &lt;johndoe@example.com&gt; To check that the user details have been set correctly: git config --list "],["tracking-code-with-git-in-rstudio.html", "Chapter 2 Tracking code with Git (in RStudio) 2.1 Creating a local repository 2.2 Hiding files from git 2.3 Tracking project changes 2.4 Recovering old versions of your repository 2.5 Creating and switching between branches 2.6 Merging branches", " Chapter 2 Tracking code with Git (in RStudio) 2.1 Creating a local repository A git repository is a set of files associated with a particular project that are tracked together. To track a set of files, git needs to be initiated within the topmost level of a folder containing the work in question. Every file at and within the file hierarchy that git is initiated in will be tracked by git. If you are writing code in R, it is best to organise your code in an RStudio project, and then use RStudio to initiate your repository and track your progress. An R package that is useful for automating a lot of the functions of git is usethis. This package is also useful if you ever want to write your own R package. install.packages(&quot;usethis&quot;) library(usethis) 2.1.1 Initiating a repository for existing code If you have Git installed on your computer, you can turn an existing project into a git repository by executing the following line in the console of your RStudio project: usethis::use_git() The function will prompt you to make a first commit. Agree. Alternatively, click Tools -&gt; Version Control -&gt; Project Setup, then click the dropdown box Version control system and select Git. You should see a Git tab in the top right hand panel once Git is associated with a project. If you can’t, select View -&gt; Show Git. If it still does not appear, you may need to close and reopen RStudio. 2.1.2 Initiating a new project with git In RStudio, click on File -&gt; New Project, or the button. A ‘Create Project’ window will pop up, and you should select New Directory-&gt;New Project. The following window will then open, allowing you to select a name for your package, as well as choose the directory in which the package will be stored. At this point, you can select if you would like to initiate this project with a Git repository. If you already have Git installed on your computer, I recommend that you check the Create a git repository box before you select Create Project. A new RStudio window will open containing your new project. In your project window, you will see that a number of files have been automatically generated. These are your project file, and .gitignore file. We will talk about .gitigore later on. You should see these files listed in the Git tab in the top right hand panel. Now would be a good time to make your first commit. Go to the Tracking project changes section for instructions on how to do this. 2.2 Hiding files from git Within a project there are often a number of invisible files that are created automatically by the tools being used. For example, R will often generate a .Rhistory file that is of no benefit to you to track. In this case it is advisable to hide these files from git in order to prevent them from being unnecessarily tracked. Files are hidden from Git by placing them in a .gitignore file within the same directory that you initiated git. For files/folders listed in .gitignore, the path directory of the files should be relative to the directory of the .gitignore file. You can edit the file by opening it in RStudio. Both methods for initiating a git repositories that were listed above should have automatically populated your .gitignore file with commonly hidden files. If you have previously committed a file and want to stop tracking the file without deleting the file from your local working directory, in addition to listing the file in .gitignore, run the following line in either Terminal or Git Bash: git rm --cached &lt;.Rhistory&gt; If you want to hide but not delete a folder, you will need to include the argument -r: git rm --cached -r &lt;.Rproj.user/**&gt; In the above command /** indicates that you want to indicate every file contained within the .Rproj.user folder. 2.3 Tracking project changes Git keeps track of different versions of a project by taking ‘snapshots’ of the project at times specified by the user. Versions of a project should ideally be tracked (committed) at the completion of some new feature. Eg: once you have finished reformatting a file, have finished updating a function, or have completed an initial working version of some new function. This will prevent confusion if you ever need to revert to a previous version of a file. A tracked file can exist in three stages according to Git. If a file matches the most recently committed version of the file in Git, it is considered Unmodified. If the file is edited in any way, it becomes Modified. When a Modified file is at an appropriate stage to be tracked by Git, it can be marked as a Staged file. Once a Staged file has been committed, this file returns to an Unmodified status. Figure 2 demonstrates the different states that can exist within a git repository. The git ‘database’ contains a record of all the commits that have occurred up to date. The working directory is where you as a user do work. You can modify the files in the repository, and while git can recognise that the files in your directory may not match the most recent commit, git cannot add new changes unless you stage them first. By staging files that have been changed, you indicate which changes to be included in the new snapshot that will be added to the database. Figure 2 also indicates some example Terminal commands that can be used to transition between different states. As stated previously, a Git repository can easily be initiated by running use_git(), including performing your first commit. You can also specify that you want to initiate your RStudio project with a Git repository. If you do it this way however, you will need to create your first commit yourself. In the top right panel, you should see a Git tab, if you click on it you will be given a number of tools that will allow you to interact with Git. Along the top of this tab are a number of buttons that replace the most common Git terminal commands. This tab will also list any files that do not match the previous commit. This could be because the file was modified, or because the file has been created or deleted since the last commit. These types of files will appear as shown below. Newly added files will have a yellow question mark under the Status column, while a modified file will have a blue M listed to the right hand side of the column. It can be seen that under the Staged column, neither of the boxes have been ticked off. This means that neither of these files have been staged to be committed. In order to stage files, the user simply needs to tick the boxes listed in the staged column. As shown below. Once these files have been staged, their status will change. New files will be indicated with a green A, while the blue M for modified files will now be listed to the left. To commit the selected files, select the Commit button. This will open up a window that will give the opportunity to provide a commit message. Provide a meaningful description of the changes that you have made, then select Commit. If you would like to see the differences in the listed files when compared to the most recent commit, you can select the Diff button. This will open up the same window which will also allow the user to explore the differences for each affected file. 2.4 Recovering old versions of your repository Git keeps a record of every committed version of a project. Each commit contains the version of each file at the time of the commit, the description of the committed version provided by the user at the time of the commit, as well as a unique ID number generated at the time of the commit. If the commit log is viewed, all previous commits made by users will be listed in reverse chronological order. To view this log of the previous commits, you can select the History button in the Git tab (looks like a clock). There are many reasons as to why you may want to revert to a previous version of a file. It could be that the current solution that has been built is not viable, so you want to return to the time before your current fix in order to go in a different direction. It could also be that the current version of the project is broken in some way, and so you want to go back to a functioning version of the code. Regardless of the reason, this is a step that should be taken with caution, because once you have reverted to a previous version of the code, you will lose all the subsequent work that you have done. This risk can be mitigated through the use of branches, which we will discuss later. Unfortunately, to go back in time you will need to interact with Terminal (or Git Bash). If you are using a Mac, you should be able to open a Terminal window as part of your RStudio project, just select Tools -&gt; Terminal, or use that short cut Shift+Alt+T. If you are using Windows, you will need to open a Git Bash session and make sure that you are in the correct working directory. This can be done by typing the command cd (change directory), and then dragging and dropping the folder into the Git Bash window (this will generate the file path). If you want to revert to the most recent commit (and loose the most recent modifications that you have made), you can run: git reset If you would like to go further back in time in your project, you will need to refer to the exact snapshot that you want to return to. If you select the History button, a window will open showing all of your past commits. If you select the commit you would like to return to, you will see a series of letters and numbers refered to as SHA. This is the equivalent of a commit ID. For example, the first few symbols of the version you want to revert to might be 0022cdd166. In which case you would run: git reset --hard &lt;0022cdd166&gt; NOTE: this is one of the few actions that cannot be reversed. If returning to a previous version, any more recent work will be permanently lost on that branch. TREAD CAREFULLY! 2.5 Creating and switching between branches An amazing feature of git, is the ability to have multiple branches for a project. Different branches can be created if you need to debug a feature, create a new feature, etc. Once you are happy with your changes, branches can be merged back in to the master. The initial, automatic branch that is created when you initiate git, is called master. Any additional branches should be given a name that will indicate it’s purpose. When you create a new branch, that new branch will have the entire history of the branch that you are currently working on. Therefore if you would like to revert to a previous version of a project, it is a good idea to first create another branch that will keep a record of your more recent commits as a backup. When dealing with branches the following section of the git panel will be relevant. To create a new branch click on the New Branch button. This will open a new window that will allow you to name your new branch. Once you select Create, you will see that the Main drop down menu has now changed to your new branch. If you select the drop down menu, you will be able to switch between any branch that you have created. If switching between branches, make sure that you have committed any changes that you want to keep on the current branch. 2.6 Merging branches A consequence of having multiple branches with partially overlapping histories, is that if you want to merge two branches together, there may be conflicts in the code. The way that git merges files is by comparing the changes that have been made to the code in each of the two branches in comparison to the most recent shared commit history (the point in time when the new branch was created). To merge another branch into the branch on which you are currently working: git merge &lt;otherBranch&gt; If the changes in each branch have occurred in different files or lines in the code, then git will automatically incorporate those changes. If the same section of code has been modified on both branches, then git will require the user to manually merge the two files. In the case that you are required to manually merge conflicts within a file, git will list the files that require merging. When you open said file, git will indicate all of the locations in the file that have been edited in both of the merged branches as shown in the example below: merged code &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD version 1 of code ========= version 2 of code &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a6dsjd95y merged code At every point where you see the above, you will need to either choose which of the versions of code to keep, or find a way to incorporate aspects of both. In either case, you will need to manually change the file, including getting rid of the signposting generated by git. If you are using RStudio, you can directly open the file to edit it. Once you have made these changes, you will need to commit the new version of the file. The commit message should include which branches were merged and potentially how you resolved any conflicts. "],["interacting-with-github.html", "Chapter 3 Interacting with GitHub 3.1 Set up an account 3.2 Remote repositories 3.3 Suggested workflow for multiple contributers", " Chapter 3 Interacting with GitHub If you want to share your code with others, actively collaborate, or just want a back up of your code, you will benefit from having a GitHib account. GitHub can act as a remote repository which can either be private among a group of developers, or publicly available. Two important concepts when interacting with a remote repository like GitHub are to push and pull. When working on your code, you will always do this from within your local repository. To download code you do not have into your local repository, you ‘pull’ it from the remote. If you want to share code that you have written to the remote, you must ‘push’ it there. Once you have set up a connection between a local and remote repository, you interact with the remote primarily by pushing and pulling. 3.1 Set up an account To create your own GitHub account use the following link: Setting up your own GitHub account. Once you have your GitHub account, you will need to make sure that Git on your computer can communicate with GitHub. We can do this by using a HTTPS protocol, which will require a personal access token (PAT). To generate your token: usethis::create_github_token() This will take you to a web page that will allow you generate the token. You should make a note of the purpose of the key (eg. what project it is used for), specify the expiry of the token (I recommend no expiry), and choose your scopes (use “repo”, “user”, and “workflow”). Click Generate token. The generated token will not be accessible once you navigate from this page, so store it somewhere or keep the window open. You can record your PAT using the following function: gitcreds::gitcreds_set() 3.2 Remote repositories Once you have an account, on the repositories tab of your profile you can select to initiate a new repository. You will be required to name your project, and select if the repository is to be public or private. You can choose if you want to provide a description of your project, or if you want to automatically generate helper files like a README, .gitignore, or a license. If you are creating this remote repository for an already existing local repository you should NOT initiate a README, .gitignore, or choose a license. If you choose to initiate these files you will need to resolve merge conflicts when you try to push your local project to the remote repository. Once you select Create repository, you will be taken to a page with instructions on how set up the repository depending on your particular situation. The commands are provided for you including the correct Git addresses, so you can copy the relevant commands directly into Terminal. If you are using Git Bash make sure that you are within the correct local directory. If you use the Terminal window within RStudio, you should automatically be in the correct directory. For example, if you want to push a local repository on to your new remote, you can follow the instructions under the heading “…or push an existing repository from the command line”, which will look something like the below: git remote add origin https://github.com/JohnDoe/test.git git branch -M main git push -u origin main Literally copy and past the commands into either Terminal or Git Bash. This will likely prompt an opportunity for you to provide your user name and PAT to validate your connection with GitHub. From this point on, you can work directly with the Git tab on RStudio. To pull changes from the remote, select the downward blue arrow. Whenever you have an update to the package, commit the change and push the new version to your GitHub repository by selecting the upward green arrow. 3.2.1 Automatically generating a remote repository If Git on your computer has already been set up to interact with your GitHub account, you will be able to automatically generate a remote repository, and push your local reop to that remote using the usethis package. Simply run: use_github() The following checks will be performed: that the project is already a Git repo that the current branch is the default branch that there are no uncommitted changes that there are no pre-existing origin remotes If these checks pass, the following actions will be performed: An associated repository will be created on your GitHub That GitHub repository will be added to your local repository as the origin remote Make an initial push to GitHub Calls use_github_links() if the project is an R package, so as to add information to the DESCRIPTION file regarding the GitHub repository 3.2.2 Clone repository If there is an exisiting repository on GitHub that you would like to contribute to, you can clone that repository on to you computer so that you have your own local copy. To do so, open a New Project, select Version Control, then Git. You will need to provide the HTTPS link from the repository that you want to clone, and specify the location that you would like to keep the repository in. Check the Open in new session box, the select Create Project. To find the HTTPS url link, click onto the GitHub page of your repository of interest. You will see a green Code drop down menu. Under Local, then HTTPS, you will see the url that you need to provide. 3.3 Suggested workflow for multiple contributers The proposed work flow is best practice for multiple users to minimize the chance that work is lost. All actions are performed within the user’s local repository. A graphical representation of this work flow can be seen in Figure 3. On your local repository, build a new temporary branch that you will use to create a new feature. You will do work on this branch, and leave the main branch clean. Once you have completed work on your new feature, commit the changes. Switch back to the master branch and pull any changes that your collaborators may have made. This will allow you to merge any potential incompatibilities on your local machine. If there are merge conflicts, resolve them and commit the resolution. Once conflicts are resolved, or if there were no conflicts, you can push your changes to the remote. Once you have pushed your changes, you can delete the temporary branch. Figure 3. A representation of the workflow that is suggested when collaborating on a project, from the point of view of a single user. "],["useful-links.html", "Chapter 4 Useful links", " Chapter 4 Useful links Installing Git A guide for Git use with R Pro Git Setting up your own GitHub account "]]
